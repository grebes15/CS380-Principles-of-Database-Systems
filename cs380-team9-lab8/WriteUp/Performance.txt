Overall, DOM-based XML parsing seems to have the potential to be a very fast and efficient method of parsing XML. Our performance tests of five XML files (two provided by the lab, the other three sample programs found on Google) using DOMEcho.java revealed that each parsing takes an exceptionally short amount of time, with the max clocking in at just 32,188 nanoseconds. It is worth noting, however, that we worked with fairly small XML files throughout the lab. The amount of time it takes to parse files seems to increase linearly with the complexity of the file, as could be reasonably expected.nih-mesh was our largest xml file, so naturally it took the longest. Likewise, staff and books were fairly short and straightforward, so they took less time to parse.

Naturally, a program is not always parsed in the same amount of time twice. Running DOMEcho several times for the same file showcases a gap as large as 800 nanoseconds- which, while not exactly large by normal standards, is nonetheless an interesting detail. It shows that while DOMEcho can reasonably be expected to perform well consistently, the time overhead of utilizing DOMEcho is somewhat variable.

Given the trend of larger files taking longer, it can be assumed that larger files than the ones tested would cause DOMEcho to take longer to parse. With exceptionally large files, it could even begin to take long enough that we could reasonably start measuring in seconds rather than nanoseconds. However, even if we reach that point, DOMEcho remains quite the efficient method of parsing. The fact that we even have to speculate about the possibility of a program taking over a second to run speaks volumes towards its efficiency.

In contrast to DOMEcho's natural efficiency is ReadXMLFileWithDOM, which seems to perform much worse than DOMEcho across the board. Just look at the time it took to parse staff.xml: 44605716 nanoseconds for ReadXML versus just 23330 for DOMEcho. Of course, ReadXML has the extra work of actually printing out the various elements of the XML program, but even factoring this in, it seems to take much longer. In terms of time overhead, DOMEcho certainly wins the race without much difficulty. There's also the fact that ReadXML isn't as sophisticated as DOMEcho, as it cannot seem to handle files as complex as nih-mesh at all. Overall, DOMEcho is clearly the superior option, thanks to its speed and usability.

DOMEcho provides a strong case for the usability of DOM-based XML parsing. It appears to be comprehensive, able to parse whatever XML files it's given. In addition, it parses with consistently low time-overheard. Basically, DOM-based XML parsing, when implemented well, seems to be an extremely strong approach to parsing an XML document.
